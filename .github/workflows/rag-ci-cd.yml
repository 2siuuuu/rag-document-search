name: RAG System CI/CD Pipeline  # 워크플로우의 이름 - GitHub Actions 탭에서 표시됨

on:  # 워크플로우 트리거 조건
  push:  # 코드가 저장소에 푸시될 때마다 실행
    branches: [ main ]  # main 브랜치에 푸시될 때만 실행
  pull_request:  # PR이 생성되거나 업데이트될 때 실행
    branches: [ main ]  # main 브랜치로의 PR일 때만 실행

jobs:  # 실행할 작업들
  test:  # 테스트 작업
    runs-on: ubuntu-latest  # 작업이 실행될 환경 (Ubuntu 최신 버전)
    
    steps:  # 순차적으로 실행할 단계들
    - uses: actions/checkout@v4  # 저장소 코드를 체크아웃 (가져오기)
      
    - name: Set up Python 3.11  # Python 환경 설정 (프로젝트가 3.11 사용)
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Add conda to system path  # Conda 명령어를 사용할 수 있도록 PATH에 추가
      run: |
        echo $CONDA/bin >> $GITHUB_PATH
        
    - name: Install dependencies  # 프로젝트 의존성 설치
      run: |
        # Conda 환경 파일이 없으므로 requirements.txt 사용
        conda create -n rag-env python=3.11 -y
        conda activate rag-env
        pip install -r backend/requirements.txt
        pip install pytest flake8
        
    - name: Lint with flake8  # 코드 품질 검사
      run: |
        # 심각한 구문 오류만 체크
        flake8 backend --count --select=E9,F63,F7,F82 --show-source --statistics
        # 경고 수준의 오류 체크 (빌드는 중단하지 않음)
        flake8 backend --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
        
    - name: Test with pytest  # 단위 테스트 실행
      run: |
        cd backend
        pytest
        
  build:  # 도커 이미지 빌드 작업
    needs: test  # test 작업이 성공한 후에만 실행
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
      
    - name: Set up Docker Buildx  # 효율적인 Docker 빌드를 위한 설정
      uses: docker/setup-buildx-action@v2
      
    - name: Login to DockerHub  # Docker Hub 로그인
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}  # GitHub Secrets에서 가져옴
        password: ${{ secrets.DOCKER_PASSWORD }}
        
    - name: Build and push Docker images  # 이미지 빌드 및 푸시
      run: |
        docker-compose build
        docker-compose push
        
  deploy:  # 배포 작업
    needs: build  # build 작업이 성공한 후에만 실행
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'  # main 브랜치일 때만 배포
    
    steps:
    - uses: actions/checkout@v4
      
    - name: Deploy to server  # 서버에 배포
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USER }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        script: |
          cd /path/to/project
          git pull
          docker-compose pull
          docker-compose up -d
