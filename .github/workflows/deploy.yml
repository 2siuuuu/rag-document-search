name: Backend Deploy to ECS with ALB (develop-backend)

on:
  push:
    branches: [ develop-backend ]

jobs:
  lint-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 pytest
          if [ -f backend/requirements.txt ]; then
            pip install -r backend/requirements.txt
          fi
          pip install "pydantic[email]" "passlib[bcrypt]" "python-jose[cryptography]"

      - name: Lint with flake8
        run: |
          # 심각한 오류만 빌드 실패 처리
          flake8 backend --count --select=E9,F63,F7,F82 --show-source --statistics
          # 경고는 표시하되 빌드 실패는 아님
          flake8 backend --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: Run unit tests
        run: |
          cd backend
          export TEST_MODE=True
          pytest -xvs

  build-and-deploy-backend:
    needs: lint-and-test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build and push Docker image to ECR
        uses: docker/build-push-action@v4
        with:
          context: ./backend
          push: true
          tags: |
            ${{ secrets.ECR_REGISTRY }}/${{ secrets.ECR_REPOSITORY }}:${{ github.sha }}
            ${{ secrets.ECR_REGISTRY }}/${{ secrets.ECR_REPOSITORY }}:latest
          build-args: |
            REDIS_HOST=${{ secrets.REDIS_HOST }}
            REDIS_PORT=${{ secrets.REDIS_PORT }}
            REDIS_DB=${{ secrets.REDIS_DB }}
            RDS_USER=${{ secrets.RDS_USER }}
            RDS_PASSWORD=${{ secrets.RDS_PASSWORD }}
            RDS_ENDPOINT=${{ secrets.RDS_ENDPOINT }}
            RDS_DB_NAME=${{ secrets.RDS_DB_NAME }}
            OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}
            LANGCHAIN_API_KEY=${{ secrets.LANGCHAIN_API_KEY }}
            LANGCHAIN_PROJECT=${{ secrets.LANGCHAIN_PROJECT }}
            LANGCHAIN_ENDPOINT=${{ secrets.LANGCHAIN_ENDPOINT }}
            LANGCHAIN_TRACING_V2=${{ secrets.LANGCHAIN_TRACING_V2 }}
            S3_BUCKET_NAME=${{ secrets.S3_BUCKET_NAME }}
            DATABASE_URL=postgresql+psycopg://${{ secrets.RDS_USER }}:${{ secrets.RDS_PASSWORD }}@${{ secrets.RDS_ENDPOINT }}:5432/${{ secrets.RDS_DB_NAME }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Check if service exists
        id: check-service
        run: |
          SERVICE_STATUS=$(aws ecs describe-services --cluster ${{ secrets.ECS_CLUSTER }} --services ${{ secrets.ECS_SERVICE }} --query 'services[0].status' --output text || echo "MISSING")
          echo "service_exists=$([[ "$SERVICE_STATUS" != "MISSING" ]] && echo "true" || echo "false")" >> $GITHUB_OUTPUT
          echo "Service status: $SERVICE_STATUS"

      - name: Render new ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ecs-task-definition.json
          container-name: rag-document-management-backend
          image: ${{ secrets.ECR_REGISTRY }}/${{ secrets.ECR_REPOSITORY }}:${{ github.sha }}
          environment-variables: |
            RDS_USER=${{ secrets.RDS_USER }}
            RDS_PASSWORD=${{ secrets.RDS_PASSWORD }}
            RDS_ENDPOINT=${{ secrets.RDS_ENDPOINT }}
            RDS_DB_NAME=${{ secrets.RDS_DB_NAME }}
            OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}
            LANGCHAIN_API_KEY=${{ secrets.LANGCHAIN_API_KEY }}
            LANGCHAIN_PROJECT=${{ secrets.LANGCHAIN_PROJECT }}
            LANGCHAIN_ENDPOINT=${{ secrets.LANGCHAIN_ENDPOINT }}
            LANGCHAIN_TRACING_V2=${{ secrets.LANGCHAIN_TRACING_V2 }}
            S3_BUCKET_NAME=${{ secrets.S3_BUCKET_NAME }}
            DATABASE_URL=postgresql+psycopg://${{ secrets.RDS_USER }}:${{ secrets.RDS_PASSWORD }}@${{ secrets.RDS_ENDPOINT }}:5432/${{ secrets.RDS_DB_NAME }}
            REDIS_HOST=${{ secrets.REDIS_HOST }}
            REDIS_PORT=${{ secrets.REDIS_PORT }}
            REDIS_DB=${{ secrets.REDIS_DB }}
            

      - name: Deploy ECS service with new task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v2
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ secrets.ECS_SERVICE }}
          cluster: ${{ secrets.ECS_CLUSTER }}
          wait-for-service-stability: ${{ steps.check-service.outputs.service_exists == 'true' }}
          wait-for-minutes: 5
          
      - name: Verify deployment
        run: |
          echo "Waiting for service to stabilize..."
          sleep 30
          ALB_DNS="${{ secrets.ALB_DNS }}"
          if [ -n "$ALB_DNS" ]; then
            echo "Testing connection to ALB at $ALB_DNS"
            HEALTH_STATUS=$(curl -s -o /dev/null -w "%{http_code}" "http://$ALB_DNS/fast_api/health" || echo "Failed")
            if [ "$HEALTH_STATUS" = "200" ]; then
              echo "✅ Health check passed"
            else
              echo "⚠️ Health check returned: $HEALTH_STATUS (not 200)"
              echo "Deployment completed, but health check is not yet passing. This could be normal during initialization."
            fi
          else
            echo "ALB_DNS secret not set, skipping verification"
          fi

      - name: Send Discord notification
        if: always()
        uses: sarisia/actions-status-discord@v1
        with:
          webhook: ${{ secrets.DISCORD_WEBHOOK }}
          status: ${{ job.status }}
          title: "Backend Deployment to ECS"
          description: |
            Repository: ${{ github.repository }}
            Commit: ${{ github.sha }}
            Ref: ${{ github.ref }}
            Triggered by: ${{ github.actor }}
